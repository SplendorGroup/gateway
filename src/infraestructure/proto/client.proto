syntax = "proto3";

package client;

message AuthUser {
  string id = 1;
  string name = 2;
  string email = 3;
  bool email_verify = 4;
  repeated string roles = 5;
  repeated string permissions = 6;
}

message ClientEntity {
  string id = 1;
  string name = 2;
  string cpf = 3;
  string cnh = 4;
  string email = 5;
  string phone = 6;
  string created_at = 7;
  string updated_at = 8;
}

message CreateClientDTO {
  string name = 1;
  string cpf = 2;
  string cnh = 3;
  string email = 4;
  string phone = 5;
  string created_at = 6;
  string updated_at = 7;
}

message CreateClientRequest {
  CreateClientDTO body = 1;
  optional AuthUser user = 2;
}

message UpdateClientDTO {
  optional string name = 1;
  optional string cpf = 2;
  optional string cnh = 3;
  optional string email = 4;
  optional string phone = 5;
  optional string updated_at = 6;
}

message UpdateClientParamDTO {
  string id = 1;
}

message UpdateClientRequest {
  UpdateClientParamDTO params = 1;
  UpdateClientDTO body = 2;
  optional AuthUser user = 3;
}

message FindOneClientDTO {
  string id = 1;
}

message FindOneClientRequest {
  FindOneClientDTO params = 1;
  optional AuthUser user = 2;
}

message FindAllClientDTO {
  optional string id = 1;
  optional string name = 2;
  optional string cpf = 3;
  optional int32 page = 4;
}

message FindAllClientRequest {
  optional FindAllClientDTO query = 1;
  optional AuthUser user = 2;
}

message FindAllClientResponse {
  int32 total = 1;
  int32 page = 2;
  int32 pages = 3;
  int32 per_page = 4;
  int32 in_page = 5;
  repeated ClientEntity data = 6;
}

message DeleteClientDTO {
  string id = 1;
}

message DeleteClientRequest {
  DeleteClientDTO params = 1;
  optional AuthUser user = 2;
}

message DeleteClientResponse {}

service ClientService {
  rpc CreateClient(CreateClientRequest) returns (ClientEntity);
  rpc UpdateClient(UpdateClientRequest) returns (ClientEntity);
  rpc GetClients(FindAllClientRequest) returns (FindAllClientResponse);
  rpc GetClientById(FindOneClientRequest) returns (ClientEntity);
  rpc DeleteClient(DeleteClientRequest) returns (DeleteClientResponse);
}
